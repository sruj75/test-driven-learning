---
description: 
globs: 
alwaysApply: false
---
# Database Schema

The TestDrivenLearning platform uses Supabase PostgreSQL for data storage with the following schema:

## User-Related Tables

- **users**
  - Primary user account information
  - Google authentication details
  - Created by Supabase Auth

- **profiles**
  - Extended user information
  - Preferences and settings
  - References active learning domain

- **subscriptions**
  - Subscription status and plan details
  - Stripe subscription references
  - Billing information

## Learning Content Tables

- **domains**
  - Learning areas/subjects
  - User-specific learning interests
  - Enables multi-domain learning (post-MVP)

- **goals**
  - Learning objectives
  - Linked to specific domains
  - Target completion dates

- **tests**
  - Assessment questions and answers
  - Difficulty levels
  - Knowledge topics/tags
  - Question types (multiple choice, open-ended)

- **resources**
  - YouTube video references
  - Resource metadata
  - Topic/concept coverage
  - Difficulty level

## Progress Tracking Tables

- **user_progress**
  - Test completion status
  - Resource consumption
  - Last accessed timestamps
  - User notes and annotations

- **test_results**
  - User responses to test questions
  - Knowledge gap identification
  - Performance metrics

- **resource_feedback**
  - Helpful/not helpful ratings
  - Specific feedback categories
  - Alternative resource requests

## Database Structure

The database will be implemented in Supabase PostgreSQL with these main components:

### Users and Authentication
- User profiles with learning preferences
- Authentication managed via Supabase Auth
- Progress tracking and history

### Test Structure
- Tests with metadata (subject, difficulty, tags)
- Questions with various formats (multiple choice, short answer)
- User responses and scoring
- Question tagging for concept mapping

### Learning Resources
- YouTube video recommendations
- Resource engagement tracking
- User feedback on resource quality

### Analytics
- Learning progress metrics
- Knowledge gap identification
- User engagement statistics

## Schema Definition

Database schemas will be defined declaratively in the `supabase/schemas` directory following this pattern:

```sql
-- Example schema definition
create table "users" (
  "id" uuid references auth.users not null primary key,
  "created_at" timestamp with time zone default now(),
  "email" text not null,
  "preferences" jsonb
);

create table "tests" (
  "id" uuid default gen_random_uuid() primary key,
  "created_at" timestamp with time zone default now(),
  "title" text not null,
  "description" text,
  "subject" text not null,
  "metadata" jsonb
);
```

## Row Level Security

Implement Row Level Security (RLS) policies to ensure users can only access their own data:

```sql
-- Example RLS policy
create policy "Users can only access their own data"
  on "users"
  for all
  using (auth.uid() = id);
```

## JSONB for Flexibility

Use JSONB columns for flexible data that may evolve frequently:
- User preferences
- Test metadata
- Question configuration
- Learning resource metadata

## Database Migrations

Generate migrations using the declarative schema approach:
1. Update schema definitions in `supabase/schemas/`
2. Run `supabase db diff -f migration_name` to generate migration files
3. Apply migrations with `supabase db push`
